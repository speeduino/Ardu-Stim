# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  Build-for-linux:
    name: Run npm on Ubuntu
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'UI' # Here the path to the folder where package-lock.json is located.
    steps:
      - uses: actions/checkout@v4
      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libusb-1.0-0 libusb-1.0-0-dev libudev-dev
          version: 1.0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '19.x'
      - name: Install Electron and build
        run: |
          npm install @electron/rebuild -g
          npm install electron-builder -g
          npm install
          npm run package-linux-workflow
      - name: Save .appimage as artefact
        uses: actions/upload-artifact@v4
        with:
          name: Ardu-Stim  linux
          path: UI/dist/*.AppImage

  Build-for-mac-x86_64:
    name: Run npm on x86_64 macos
    runs-on: macos-12 #As of Apr 2024 macos-12 will give an intel host and macos-14 will be aarm64
    defaults:
      run:
        working-directory: 'UI' # Here the path to the folder where package-lock.json is located.
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node, Electron and built
        uses: actions/setup-node@v4
        with:
          node-version: '19.x'
      - name: Install Electron and build
        run: |
          python3 -m pip install setuptools
          npm install @electron/rebuild -g
          npm install electron-builder -g
          npm install
          npm run package-mac-workflow
      - name: Save .dmg as artefact
        uses: actions/upload-artifact@v4
        with:
          name: Ardu-Stim Mac-x86_64
          path: UI/dist/*.dmg

  # This build does NOT work. macos-14 arm64 makes code signing mandatory and applications built on it without signing will report as 'damaged'. See: https://github.com/electron-userland/electron-builder/issues/7602
  Build-for-mac-arm64:
    if: false #Disables this job. See note above. 
    name: Run npm on arm64 macos
    runs-on: macos-14 #As of Apr 2024 macos-13 will give an intel host and macos-14 will be aarm64
    defaults:
      run:
        working-directory: 'UI' # Here the path to the folder where package-lock.json is located.
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node, Electron and built
        uses: actions/setup-node@v4
        with:
          node-version: '19.x'
      - name: Install Electron and build
        run: |
          brew install python-setuptools 
          npm install @electron/rebuild -g
          npm install electron-builder -g
          npm install
          npm run package-mac-workflow
      - name: Save .dmg as artefact
        uses: actions/upload-artifact@v4
        with:
          name: Ardu-Stim Mac-arm64
          path: UI/dist/*.dmg

  Build-for-win:
    name: Run npm on x64 Windows
    runs-on: windows-latest
    defaults:
      run:
        working-directory: 'UI' # Here the path to the folder where package-lock.json is located.
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node, Electron and built
        uses: actions/setup-node@v4
        with:
          node-version: '19.x'
      - name: Install Electron and build
        run: |
          npm install @electron/rebuild -g
          npm install electron-builder -g
          npm install
          npm run package-win
      - name: Save .exe as artefact
        uses: actions/upload-artifact@v4
        with:
          name: Ardu-Stim Win 64
          path: UI/dist/*.exe
